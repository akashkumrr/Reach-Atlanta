{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"jeans",
				"jeans_name"
			],
			[
				"lap",
				"lap_name"
			],
			[
				"product",
				"product_name"
			],
			[
				"pro",
				"product_dict"
			],
			[
				"fin",
				"find_elements_by_xpath"
			],
			[
				"get",
				"get_attribute"
			],
			[
				"class",
				"class_"
			],
			[
				"resul",
				"result_text"
			],
			[
				"res",
				"results_container"
			],
			[
				"resi",
				"results_container"
			],
			[
				"i_u",
				"img_url_list"
			],
			[
				"show",
				"show_number"
			],
			[
				"strt",
				"start_str"
			],
			[
				"pr_pr",
				"product_price_list"
			],
			[
				"pr",
				"product_dict"
			],
			[
				"img",
				"img_url_list"
			],
			[
				"prod",
				"product_url_list"
			],
			[
				"proU",
				"product_url_list"
			],
			[
				"pri",
				"print"
			],
			[
				"re",
				"results_string"
			],
			[
				"price",
				"price_container"
			],
			[
				"sho",
				"show_number"
			],
			[
				"zreo",
				"zero_results"
			],
			[
				"fo",
				"football"
			],
			[
				"time",
				"time_flip"
			],
			[
				"all",
				"all_urls"
			],
			[
				"comic",
				"comic_container"
			],
			[
				"com",
				"comic_container"
			],
			[
				"cla",
				"class_"
			],
			[
				"url",
				"url_appender"
			],
			[
				"ur",
				"url_appender"
			],
			[
				"model",
				"ModelType"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "h\nhi there this is akash and im very glad to have this computer up and running. I will not take it for granted from now on.",
			"settings":
			{
				"buffer_size": 123,
				"line_ending": "Windows",
				"name": "h"
			}
		},
		{
			"contents": "from selenium import webdriver\nimport time\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.chrome.options import Options\n\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.by import By\nfrom selenium.common.exceptions import TimeoutException\n\noptions = Options()\n#options.add_argument('--no-sandbox')\n\noptions.headless = True\n\n#ptions.add_argument(\"--window-size=1400x1000\")\noptions.add_experimental_option('excludeSwitches', ['enable-logging'])\t\n# for Turning of warnings in console selenium INFO:CONSOLE off\n\ndriver = webdriver.Chrome(options=options)\n\nstart = time.time()\n\n## For Flipkart\n\nprint('Flipkart')\ndriver.get(\"https://www.flipkart.com/search?q=\"+\"football\"+\"&otracker=search&otracker1=search&marketplace=FLIPKART&as-show=off&as=off\")\n\n\n#time.sleep(5)\nWebDriverWait(driver, 20).until(EC.presence_of_element_located((By.XPATH, \"//a[@class='s1Q9rs']\")))\n\nfor i in range(3):\n    name = driver.find_elements_by_class_name(\"s1Q9rs\")\n    \n    print(name[i].get_attribute(\"title\"))\n    price = driver.find_elements_by_class_name(\"_30jeq3\")\n    print(price[i].text)\n\nprint()\ntime_flip = time.time()-start\nprint(\"%.2f\" %time_flip)\nprint()\n\n## For Amazon\nprint('Amazon')\n\ndriver.get(\"https://www.amazon.in/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=\"+\"football\")\n\n#time.sleep(2)\nWebDriverWait(driver, 20).until(EC.presence_of_element_located((By.XPATH, \"//a[@class='a-link-normal a-text-normal']\")))\n\nname = driver.find_elements_by_xpath(\"//a[@class='a-link-normal a-text-normal']\")\n\ni=0\nfor i in range(0,3):\n\tprint(str(i)+\" : \"+ name[i].text)\n\ti=i+1\n\n\nprint()\ntime_amazon = time.time()-start-time_flip\nprint(\"%.2f\" %time_amazon)\nprint()\n## For shopclues\nprint('Shopclues')\n\ndriver.get(\"https://www.shopclues.com/search?q=\"+\"football\"+\"&z=0&user_id=&user_segment=default&rc=1\")\n\n#time.sleep(2)\nWebDriverWait(driver, 20).until(EC.presence_of_element_located((By.XPATH, \"//*[@class='img_section']/img[@title]\")))\n\nfor i in range(1,4):\n\t#price = driver.find_element_by_class_name(\"p_price\")\n\n\tname = driver.find_element_by_xpath(\"(//div[@class='img_section'])[\"+str(i)+\"]/img[@title]\")\n\tprint(name.get_attribute(\"title\"))\n\tprice = driver.find_element_by_xpath(\"(//div[@class='ori_price'])[\"+str(i)+\"]\")\n\tprint('Product price : '+ price.text, end='\\n\\n')\n\nprint()\ntime_shopclues = time.time()-start-time_flip-time_amazon\nprint(\"%.2f\" %time_shopclues)\nprint()\n## For snapdeal\nprint('Snapdeal')\n\ndriver.get(\"https://www.snapdeal.com/search?noOfResults=20&keyword=\"+\"football\")\n#time.sleep(2)\nWebDriverWait(driver, 20).until(EC.presence_of_element_located((By.XPATH, \"//*[@class='product-desc-rating ']\")))\n# IMP there is a whitespace after 'rating' so class name is 'product-desc-rating ' with whitespace in last\n\nanchor_tags = driver.find_elements_by_class_name(\"product-desc-rating \")\n\n\nfor i in range(0,3):\n    elements = anchor_tags[i].find_element_by_tag_name('a')\n    print(elements.text)\n\nprint()\ntime_snapdeal = time.time()-start-time_flip-time_amazon-time_shopclues\nprint(\"%.2f\" %time_snapdeal)\nprint()\n\nend = time.time()\nprint(\"Total Time : \" + \"%.2f\" % (end - start))\ndriver.close()",
			"file": "/F/#Coding Projects/Selenium python/direct_link_nothread.py",
			"file_size": 3332,
			"file_write_time": 132588002094817989,
			"settings":
			{
				"buffer_size": 3226,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/flipkart_all_selenium.py",
			"settings":
			{
				"buffer_size": 5090,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/automate.py",
			"settings":
			{
				"buffer_size": 295,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "import schedule"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/flipkart_bs.py",
			"settings":
			{
				"buffer_size": 3919,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/amazonResults.py",
			"settings":
			{
				"buffer_size": 2436,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/shopclues_with_bs4.py",
			"settings":
			{
				"buffer_size": 1702,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/F/#Coding Projects/pyscraping/comicscrap_datewise_multithread_v3.py",
			"settings":
			{
				"buffer_size": 5062,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/#Coding Projects/chatbot/thicc.py",
			"settings":
			{
				"buffer_size": 948,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/musicsel9.py",
			"settings":
			{
				"buffer_size": 4416,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/getsubs.py",
			"settings":
			{
				"buffer_size": 114,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "YouTubeTranscriptApi.get_transcript('QQT6MmRdKPU')"
			}
		},
		{
			"file": "/C/Users/hp/Downloads/#OlymPycs_v1.0/#OlymPycs_v1.0/OlymPycs.py",
			"settings":
			{
				"buffer_size": 38036,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/Flask_-_product_image_and_hyperlink_included/Flask - product image and hyperlink included/product_search.py",
			"settings":
			{
				"buffer_size": 7848,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/comicBS.py",
			"settings":
			{
				"buffer_size": 1330,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/amazonTimeSel.py",
			"settings":
			{
				"buffer_size": 2521,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/snapdeal_results.py",
			"settings":
			{
				"buffer_size": 2387,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/#Coding Projects/pyscraping/cscrap.py",
			"settings":
			{
				"buffer_size": 5374,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/shopping_multiprocess.py",
			"settings":
			{
				"buffer_size": 4865,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/amazon_bs_everything.py",
			"settings":
			{
				"buffer_size": 3685,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/Flask/Flask/product_search.py",
			"settings":
			{
				"buffer_size": 6620,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/Flask/Flask/project.py",
			"settings":
			{
				"buffer_size": 2475,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/F/#Coding Projects/Selenium python/remove_currency.py",
			"settings":
			{
				"buffer_size": 106,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "import re"
			}
		},
		{
			"contents": "# imports\nfrom flask import Flask, render_template, request, redirect, url_for, flash, jsonify, session\nimport pyrebase\nimport firebase_admin\nfrom firebase_admin import credentials, firestore\nimport json\nimport random\nimport pandas as pd\nfrom datetime import datetime, date\n\n\n# initialize python app\napp = Flask(__name__, template_folder='templates')\n\napp.secret_key = 'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'\n\n\n# firebase configurations\ndbconfig = {\n    \"type\": \"service_account\",\n    \"project_id\": \"achievers-1bf98\",\n    \"private_key_id\": \"28debaaaabc68298c651eba716c8f39ff9dbd2c0\",\n    \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDIqefQ6KqjR1hv\\nuH+aKHPKsWZDyX3mJ81W7TAFVvTTv5I+2dXVkTiJRkaQ+RIUaLohu8cqQ7lDPJxJ\\nA3dlwZow8AcFD4SQqOLvltB/zIz9yHjrm+SDm+N3LBeFP0N8KjTmo+Vp0QN7918H\\nLkK6LTJojBvkzXiSPyANko8fNdlLdbodGFWpn29JTkJ6relUsGkzDaHzQdlG6or6\\noJ+gVcAnrlhvrvVvw7QnLfMFoYTpoM0e8OFkEocfQFyuIyqSVru4t5puKhrG2VxN\\n4pmInnfhdbC+HvSeD2WY34sOTGRQwBgTCET82hB0LgClmU8COBQQQ8cI32w2SoyC\\nsozn5pxvAgMBAAECggEAKDbUvGtEd0B/GrSw7eYZfo+a3Q7uakejwT37l7Zbjmwg\\nFPR3BDv8RpaM4dToqKpsUwJc4b18zVrCP2ewb/Yivpf78Cmx+YO/JyDkXBhUUS/x\\n+9XcL/v31BRECnIpRiL3QxmpilFXD2r94mSE/ua76XPayznaZgS8mbu7bxfNmm98\\npFOkqbTmBCeaio2pzvQ7xQ/jsAT/qF2x8mrp+q9/OzT7QabFKtzAfYqv0WgPEW0C\\nrfUm5pvYDqPX52vjo+2gGjIMpviiuNBPwXnWDxayUCElfQYQ5dOsNR6ZfNAglBDf\\nYs7vVehNPV+spbzmi29zMj40pEvL0DXcN+PpxHj10QKBgQDoAZ7cWCoV1D82Ts9h\\nuDNs7dpBOFZ+Vi+aRleaDEASIZn010MrfWmfW5BTI8xiQjldo+6cq0f+qjY7pjHZ\\nlyZhpE1kxhI2o6XAmu4v2Du2pL2A5tImOqrNHeSh1GTWzzDu1e0aLWELx8XCXQaq\\n2p83L9Htk9jSOggwnsn1sl5rXQKBgQDdanywr7oyzgZhOo/RAPwsE7L+LvUvaLFi\\nJFgPuMcXk09mY8sz6LmGEtpzPrsf5WyUQup44q7hmfVNNn38Co/536sPePodQg5K\\nYpSGNNWmFsy8/pB7W2Pup+lbYRb3uv3YCzOvQe7rOVnlr+LSxYQ6hPa5e0EmyoYG\\nU/FKXdN2OwKBgQCC5ecritKz3jyL94sqJzNckhZCFfc28ImLEYT7dU3w7ORgL9PG\\nBcxCDPcw8VGvXo3fN065Nio4lPBkVzBpA86z6G+CG/7KtSofsUoR1H5cXjZNM+39\\ng7w6XlNQuvTp/ZwuJKTR0Cig7OW286V/YDnUeTaIRJJgij10sSJhbXG4QQKBgHwn\\n8yVsVF+asW8h1HUhNUZOAYeQs0HTVewvbwXZ2iH5I4PJn69K54Ur2zzWRz2ae2kj\\noLEKg3/Twf56+Og00AkQh65UawOu/65sWtZqmAbbMBEmOcRCOeYgV7U62xMs0pyr\\no165/Qv/i85E8063HO9nkaXuXFkxJTg1J89Ij4PzAoGBALPexUeZP33Jk29fACht\\nRbG5/hADRzJYmd5h0C5Dpg2C2i5vRU7nPS5vpVW62Wa4ptEaUsfMCec2S6/1gjd1\\n1xhl/o4oL4Sp0m595uYmOmumaSHNThoqplqqnxU5j8JcixpMbC5gFDMZYufvwV7e\\n/bj6/0wzAiF/q2jCEGomYXtC\\n-----END PRIVATE KEY-----\\n\",\n    \"client_email\": \"firebase-adminsdk-my9cq@achievers-1bf98.iam.gserviceaccount.com\",\n    \"client_id\": \"112766180503364388289\",\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n    \"token_uri\": \"https://oauth2.googleapis.com/token\",\n    \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n    \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-my9cq%40achievers-1bf98.iam.gserviceaccount.com\"\n}\n\nauthconfig = {\n    \"apiKey\": \"AIzaSyAvR2fbF4UN5d7_rS8yrRqVgJrE-mCesiY\",\n    \"authDomain\": \"achievers-1bf98.firebaseapp.com\",\n    \"databaseURL\": \"https://achievers-1bf98.firebaseio.com\",\n    \"projectId\": \"achievers-1bf98\",\n    \"storageBucket\": \"achievers-1bf98.appspot.com\",\n    \"messagingSenderId\": \"905499339314\",\n    \"appId\": \"1:905499339314:web:d727167cdde0f4657a2a2b\",\n    \"measurementId\": \"G-27YYG3L49M\",\n    \"serviceAccount\":\"achievers-1bf98-firebase-adminsdk-my9cq-8755203ccc.json\"\n\n}\n# firestore init\ncred = credentials.Certificate(dbconfig)\nfirebase_admin.initialize_app(cred)\ndb = firestore.client()\n\n# auth and storage init\nfirebase = pyrebase.initialize_app(authconfig)\nauth = firebase.auth()\nstorage = firebase.storage()\n\n\n\n# ************************************   app routes   **********************************************\n\n\n# admin login\n@app.route('/', methods=[\"GET\", \"POST\"])\ndef adminlogin():\n    if request.method == 'GET':\n        return render_template(\"adminlogin.html\")\n    else:\n        email = request.form['email']\n        password = request.form['password']\n        collection = db.collection('admin')  # opens 'places' collection\n        doc = collection.document(email).get()\n        data = doc.to_dict()\n        try:\n            usr = data['email']\n            if usr == email:\n                try:\n                    auth.sign_in_with_email_and_password(email, password)\n                    session['name'] = data['name']\n                    session['id'] = 'admin'\n                    return render_template('admindashboard.html')\n                except:\n                    return render_template(\"adminlogin.html\", error=\"a\")\n        except:\n            return render_template(\"adminlogin.html\", error=\"a\")\n\n\n# admin dashboard\n@app.route('/admindashboard', methods=[\"GET\", \"POST\"])\ndef admindashboard():\n    if session['id'] == 'admin':\n        return render_template(\"admindashboard.html\")\n    else:\n        return render_template('404.html'), 404\n\n\n# student login\n@app.route('/studentlogin', methods=[\"GET\", \"POST\"])\ndef studentlogin():\n    if request.method == 'POST':\n        email = request.form['email']\n        password = request.form['password']\n        print(email, password)\n        collection = db.collection('students')\n        doc = collection.document(email).get()\n        data = doc.to_dict()\n        try:\n            usr = data['email']\n            if usr == email:\n                try:\n                    auth.sign_in_with_email_and_password(email, password)\n                    session['id'] = 'student'\n                    session['name'] = data['name']\n                    session['email'] = data['email']\n                    session['class'] = data['class']\n                    session['studentid'] = data['studentid']\n                    session['board'] = data['board']\n                    return render_template('studentdashboard.html')\n                except:\n                    return render_template(\"studentlogin.html\", error=\"a\")\n        except:\n            return render_template(\"studentlogin.html\", error=\"a\")\n    else:\n        return render_template(\"studentlogin.html\")\n\n\n# student dashboard\n@app.route('/studentdashboard', methods=[\"GET\", \"POST\"])\ndef studentdashboard():\n    try:\n        if session['id'] == 'student':\n            return render_template(\"studentdashboard.html\")\n        else:\n            return render_template('404.html'), 404\n    except:\n        return render_template('adminlogin.html')\n\n\n# student register\n@app.route('/studentregister', methods=[\"GET\", \"POST\"])\ndef studentregister():\n    if session['id'] == 'admin':\n        if request.method == 'GET':\n            return render_template(\"studentregister.html\")\n        else:\n            name = request.form['name']\n            semail = request.form['email']\n            password = request.form['password']\n            studentid = request.form['studentid']\n            class1 = request.form['class']\n            board = request.form['board']\n            phone = request.form['phone']\n            collection = db.collection('students')\n            try:\n                auth.create_user_with_email_and_password(semail, password)\n                collection.document(semail).set(\n                    {\"name\": name, \"email\": semail, \"studentid\": studentid, \"class\": class1, \"board\": board, \"phone\": phone})\n                return render_template('studentregister.html', success='a')\n            except:\n                return render_template(\"studentregister.html\", error=\"a\")\n    else:\n        return render_template('404.html'), 404\n\n\n# students list\n@app.route('/studentlist', methods=[\"GET\", \"POST\"])\ndef studentlist():\n    if session['id'] == 'admin':\n        lst = []\n        collection = db.collection('students')\n        docs = collection.stream()\n        for doc in docs:\n            lst.append(doc.to_dict())\n        return render_template(\"studentlist.html\", value=lst)\n    else:\n        return render_template('404.html'), 404\n\n\n# student update\n@app.route('/studentupdate', methods=[\"GET\", \"POST\"])\ndef studentupdate():\n    if session['id'] == 'admin':\n        if request.method == 'GET':\n            return render_template(\"studentupdate.html\")\n        else:\n            email = request.form['email']\n            class1 = request.form['class']\n            name = request.form['name']\n            board = request.form['board']\n            phone = request.form['phone']\n            studentid = request.form['studentid']\n            try:\n                db.collection('students').document(email).update(\n                    {'class': class1, 'name': name, 'board': board, 'phone': phone, 'studentid': studentid})\n                return render_template('studentupdate.html', success='a')\n            except:\n                return render_template('studentupdate.html', error='a')\n    else:\n        return render_template('404.html'), 404\n\n\n# student change password\n@app.route('/studentchangepassword', methods=[\"GET\", \"POST\"])\ndef schangepassword():\n    if session['id'] == 'student':\n        email = session['email']\n        auth.send_password_reset_email(email)\n        return render_template('studentdashboard.html',  success='a')\n    else:\n        return render_template('404.html'), 404\n\n\n# logout (same for all logouts)\n@app.route('/logout', methods=[\"GET\", \"POST\"])\ndef logout():\n    session.clear()\n    return render_template(\"adminlogin.html\")\n\n\n# forgot password (same for all)\n@app.route('/forgotpassword', methods=[\"GET\", \"POST\"])\ndef forgotpassword():\n    if request.method == \"GET\":\n        return render_template(\"forgotpassword.html\")\n    else:\n        email = request.form['email']\n        try:\n            auth.send_password_reset_email(email)\n            return render_template('forgotpassword.html', success='a')\n        except:\n            return render_template(\"forgotpassword.html\", error='a')\n\n\n# error handler\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'), 404\n\n\n# upload notes\n@app.route('/uploadnotes', methods=[\"GET\", \"POST\"])\ndef uploadnotes():\n    if session['id'] == 'admin':\n        if request.method == 'GET':\n            return render_template('uploadnotes.html')\n        else:\n            file1 = request.files['file']\n            class1 = request.form['class']\n            board = request.form['board']\n            topic = request.form['topic']\n            try:\n                loc = ('{}/{}').format(board, class1)\n                name = ('{}.pdf').format(topic)\n                folder = ('{}/{}').format(loc, name)\n                storage.child(folder).put(file1)\n                collection = db.collection('notes')\n                collection.document(board).collection(\n                    class1).document(topic).set({\"topic\": topic})\n                return render_template('uploadnotes.html', success='a')\n            except:\n                return render_template('uploadnotes.html', error='a')\n    else:\n        return render_template('adminlogin.html')\n\n\n# download notes\n@app.route('/downloadnotes', methods=[\"GET\", \"POST\"])\ndef downloadnotes():\n    if session['id'] == 'student':\n        lst = []\n        class1 = session['class']\n        board = session['board']\n        collection = db.collection('notes')\n        docs = collection.document(board).collection(class1).stream()\n        for doc in docs:\n            dic = {}\n            name = doc.id\n            folder = ('{}/{}/{}.pdf').format(board, class1, name)\n            url = storage.child(folder).get_url(None)\n            dic['topic'] = name\n            dic['url'] = url\n            lst.append(dic)\n        return render_template('downloadnotes.html', value=lst)\n\n\n# upload youtubelink\n@app.route('/uploadlink', methods=[\"GET\", \"POST\"])\ndef youtubelink():\n    if session['id'] == 'admin':\n        if request.method == 'GET':\n            return render_template('uploadlink.html')\n        else:\n            try:\n                link = request.form['link']\n                class1 = request.form['class']\n                board = request.form['board']\n                topic = request.form['topic']\n                collection = db.collection('youtubelink')\n                #date1 = date.today()\n                collection.document(board).collection(\n                    class1).document(topic).set({\"link\": link})\n                return render_template('uploadlink.html', success='a')\n            except:\n                return render_template('uploadlink.html', error='a')\n    else:\n        return render_template('adminlogin.html')\n\n\n# show youtube link\n@app.route('/showlink', methods=[\"GET\", \"POST\"])\ndef showlink():\n    if session['id'] == 'student':\n        lst = []\n        class1 = session['class']\n        board = session['board']\n        collection = db.collection('youtubelink')\n        docs = collection.document(board).collection(class1).stream()\n        for doc in docs:\n            dic = {}\n            topic = doc.id\n            link1 = doc.to_dict()\n            link = link1['link']\n            print(topic)\n            print(link)\n            dic['topic'] = topic\n            dic['link'] = link\n            lst.append(dic)\n        return render_template('showlink.html', value=lst)\n    else:\n        return render_template('adminlogin.html')\n\n\n# show avaliable lec\n@app.route('/showlec', methods=[\"GET\", \"POST\"])\ndef showlec():\n    if session['id'] == 'admin':\n        if request.method == 'GET':\n            return render_template('showlec.html')\n        else:\n            class1 = request.form['class']\n            board = request.form['board']\n            lst = []\n            collection = db.collection('youtubelink')\n            docs = collection.document(board).collection(class1).stream()\n            for doc in docs:\n                dic = {}\n                dic['topic'] = doc.id\n                link1 = doc.to_dict()\n                dic['link'] = link1['link']\n                lst.append(dic)\n            return render_template(\"showlec.html\", value=lst, class1=class1, board=board)\n    else:\n        return render_template('404.html'), 404\n\n# delete lec\n\n\n@app.route('/deletelec/<board>/<class1>/<topic>', methods=[\"GET\", \"POST\"])\ndef deletelec(board, class1, topic):\n    try:\n        db.collection('youtubelink').document(\n            board).collection(class1).document(topic).delete()\n        return render_template('showlec.html', success=\"q\")\n\n    except:\n        return render_template('showlec.html', error=\"q\")\n\n\n# show avaliable notes\n@app.route('/shownotes', methods=[\"GET\", \"POST\"])\ndef shownotes():\n    if session['id'] == 'admin':\n        if request.method == 'GET':\n            return render_template('shownotes.html')\n        else:\n            class1 = request.form['class']\n            board = request.form['board']\n            lst = []\n            collection = db.collection('notes')\n            docs = collection.document(board).collection(class1).stream()\n            for doc in docs:\n                dic = {}\n                name = doc.id\n                folder = ('{}/{}/{}.pdf').format(board, class1, name)\n                url = storage.child(folder).get_url(None)\n                dic['topic'] = name\n                dic['url'] = url\n                lst.append(dic)\n            return render_template(\"shownotes.html\", value=lst, class1=class1, board=board)\n    else:\n        return render_template('404.html'), 404\n\n\n# delete notes\n@app.route('/deletenotes/<board>/<class1>/<topic>', methods=[\"GET\", \"POST\"])\ndef deletenotes(board, class1, topic):\n    try:\n        folder = ('{}/{}/{}.pdf').format(board, class1, topic)\n        print(folder)\n        db.collection('notes').document(board).collection(class1).document(topic).delete()\n        storage.delete(folder)\n        return render_template('shownotes.html', success=\"q\")\n    except:\n        return render_template('shownotes.html', error=\"q\")\n\n\n\n\n# practice question upload\n@app.route('/uploadquestions', methods=[\"GET\", \"POST\"])\ndef questionupload():\n    if request.method == 'POST':\n        file = request.files['file']\n        book = pd.read_csv(file)\n        topic = request.form['topic']\n        class_ = request.form['class']\n        board = request.form['board']\n        collection = db.collection('questions')\n        count=0\n        for row in range(len(book)):\n            collection.document(board).collection(class_).document(topic).set({'a':'a'})\n            collection.document(board).collection(class_).document(topic).collection(topic).document().set({\"question\": book.iloc[row][0], \"option1\": book.iloc[row][1], \"option2\": book.iloc[row][2], \"option3\": book.iloc[row][3], \"option4\": book.iloc[row][4], \"correctoption\": str(book.iloc[row][5]), \"marks\": str(book.iloc[row][6]), \"topic\":topic,\"board\":board })\n            count+=1\n        return render_template(\"question_upload.html\",success=\"a\")\n    else:\n        return render_template(\"question_upload.html\")\n\n\n\n\n# practice question\n@app.route('/practice', methods=[\"GET\",\"POST\"])\ndef practice():\n    if request.method == 'GET':\n        data=[]\n        board = session['board']\n        class_ = session['class']\n        collection = db.collection('questions')\n        docs = collection.document(board).collection(class_).stream()\n        for doc in docs:\n            print(doc.id)\n            data.append(doc.id)\n        data1 = len(data)\n        return render_template(\"practice.html\" , value = data , len = data1, stri=[\"\"])\n\n\n@app.route('/practice_test',methods=[\"GET\",\"POST\"])\ndef practice_test():\n    if request.method==\"POST\":\n        board = session['board']\n        number = int(request.form['number'])\n        leng = number\n        topic = request.form['topic']\n        class_ = session['class']\n        lis=[]\n        collection = db.collection('questions')\n        docs = collection.document(board).collection(class_).document(topic).collection(topic).stream()\n        for doc in docs:\n            lis.append(doc.id)\n\n        if len(lis)<leng:\n            class_ = session['class']\n            data3=[]\n            collection = db.collection('questions')\n            docs = collection.document(board).collection(class_).document(topic).collection(topic).stream()\n            for doc in docs:\n                data3.append(doc.id)\n            data4 = len(data3)\n            stri=\"Oops!!! maximum questions for this subject are \"+str(len(data3))\n            return render_template(\"practice.html\" , value = data3 , len = data4, stri=[stri])\n        data=[]\n        data1 = random.sample(lis,number)\n        for x in data1:\n            doc = collection.document(board).collection(class_).document(topic).collection(topic).document(x).get()\n            temp = doc.to_dict()\n            data.append(temp)\n\n\n        return render_template(\"practice_test.html\", value=data , length=leng)\n\n\n\n\n# test series\n@app.route('/testseries' , methods=[\"GET\",\"POST\"])\ndef testseries():\n    if request.method==\"GET\":\n        class_ = session['class']\n        board = session['board']\n        date1= date.today()\n        time1 = datetime.now().time()\n        collection = db.collection('available_tests')\n        docs = collection.stream()\n        for doc in docs:\n            enddate = doc.get(\"enddate\")\n            endtime = doc.get(\"endtime\")\n            enddate = datetime.strptime(enddate, '%Y-%m-%d').date()\n            endtime = datetime.strptime(endtime, '%H:%M:%S').time()\n            print(enddate,endtime,date1,time1)\n            if enddate<date1 or (enddate == date1 and endtime < time1):\n                collection.document(board).collection(class_).document(doc.id).delete()\n                db.collection(\"available_tests\").document(doc.id).delete()\n        data=[]\n        docs = db.collection(\"available_tests\").stream()\n        for doc in docs:\n            data.append(doc.id)\n        print(data)\n        data1 = len(data)\n        return render_template(\"testseries.html\" , value = data , len = data1, stri=[\"\"])\n\n@app.route('/testseries2',methods=[\"GET\",\"POST\"])\ndef testseries2():\n    if request.method==\"POST\":\n        topic = request.form['topic']\n        board = session['board']\n        class_ = session['class']\n        session['topic'] = topic\n        lis=[]\n        collection = db.collection('tests')\n        docs = collection.document(board).collection(class_).document(topic).collection(\"questions\").stream()\n        for doc in docs:\n            lis.append(doc.id)\n        data=[]\n        for x in lis:\n            doc = collection.document(board).collection(class_).document(topic).collection(\"questions\").document(x).get()\n            temp = doc.to_dict()\n            temp.update({'id':x})\n            data.append(temp)\n        i=1\n        for item in data:\n            item.update({'srno':i})\n            item.update({'topic':topic\n            })\n            i=i+1\n            if i>len(data):\n                break\n        leng=len(data)\n        return render_template(\"exam.html\", value=data , length=leng)\n\n@app.route('/update', methods=['POST'])\ndef update():\n    if request.method=='POST':\n        id=request.form['id']\n        class_ = session['class']\n        board = session['board']\n        topic = session['topic']\n        collection = db.collection('tests')\n        doc = collection.document(board).collection(class_).document(topic).collection(\"questions\").document(id).get()\n        temp = doc.to_dict()\n        print(temp)\n        return jsonify(temp)\n\n\n\n# result\n@app.route('/result', methods=['POST'])\ndef result():\n    data=request.json\n    leng=len(data)-1\n    option=[]\n    marks=0\n    name = session['name']\n    board = session['board']\n    class_ = session['class']\n    email = session['email']\n    topic = data[-1][1]\n    tot=0\n    for i in range(leng):\n        tot=tot+int(data[i][3])\n    for i in range(0,leng):\n        option.append(data[i][0])\n        if int(option[i])==int(data[i][1]):\n            marks=marks+int(data[i][3])\n    result=int((marks/tot)*100)\n\n    collection = db.collection('results')\n    collection.document(email).set({\"board\":board,\"class\":class_,\"marks\":marks,\"percent\":result,\"name\":name,\"topic\":topic})\n    #collection.document(board).collection(class_).document(topic).collection(email).document().set({\"marks\":marks,\"percent\":result})\n    return jsonify({'marks':result , 'urll': url_for('studentdashboard')})\n    #return render_template(\"studentdashboard.html\")\n\n\n\n\n# create test\n@app.route('/createtest',methods=[\"GET\",\"POST\"])\ndef create_test():\n    if request.method == 'GET':\n        lis=[]\n        collection = db.collection('available_tests').stream()\n        for doc in collection:\n            lis.append(doc.to_dict())\n        return render_template(\"createtest.html\",value=lis)\n    else:\n        board = request.form['board']\n        class_ = request.form['class']\n        file = request.files['file']\n        topic = request.form['topic']\n        startdate = datetime.strptime(request.form['startdate'], '%Y-%m-%d').date()\n        starttime = datetime.strptime(request.form['starttime'], '%H:%M').time()\n        enddate = datetime.strptime(request.form['enddate'], '%Y-%m-%d').date()\n        endtime = datetime.strptime(request.form['endtime'], '%H:%M').time()\n        duration = request.form['duration']\n        date1= date.today()\n        time1 = datetime.now().time()\n        if startdate > enddate or startdate < date1 or enddate < date1:\n            return render_template(\"createtest.html\",error1=\"a\")\n        elif((startdate == enddate and starttime > endtime) or (startdate == date1 and (starttime > endtime or starttime < time1 or endtime < time1))):\n            return render_template(\"createtest.html\",error1=\"a\")\n        book = pd.read_csv(file)\n        collection = db.collection('tests')\n        collection.document(board).collection(class_).document(topic).set({\"starttime\":str(starttime) ,\"startdate\":str(startdate) ,\"endtime\":str(endtime) ,\"enddate\":str(enddate),\"duration\":duration})\n        db.collection('available_tests').document(topic).set({\"topic\":topic,\"class\":class_,\"board\":board,\"startdate\":str(startdate),\"endtime\":str(endtime) ,\"enddate\":str(enddate),\"duration\":duration,\"starttime\":str(starttime)})\n        for row in range(len(book)):\n            collection.document(board).collection(class_).document(topic).collection(\"questions\").document().set({\"question\": book.iloc[row][0], \"option1\": book.iloc[row][1], \"option2\": book.iloc[row][2], \"option3\": book.iloc[row][3], \"option4\": book.iloc[row][4], \"correctoption\": str(book.iloc[row][5]), \"marks\": str(book.iloc[row][6])})\n        return render_template(\"createtest.html\",success1 = \"a\")\n\n\n\n# delete test\n@app.route('/deletetest/<name>/<board>/<class1>', methods=[\"GET\", \"POST\"])\ndef deletetest(name,board,class1):\n    try:\n        db.collection('available_tests').document(name).delete()\n        db.collection('tests').document(board).collection(class1).document(name).delete()\n        return render_template(\"createtest.html\",success=\"a\")\n    except:\n        return render_template('createtest.html',error='a')\n\n\n\n\n# student performance\n@app.route('/studentperformance',methods=[\"GET\", \"POST\"])\ndef studentperformance():\n    lst = []\n    docs = db.collection('results').stream()\n    for doc in docs:\n        dic = {}\n        link = doc.to_dict()\n        dic['name'] = link['name']\n        dic['email'] = doc.id\n        dic['board'] = link['board']\n        dic['class'] = link['class']\n        dic['topic'] = link['topic']\n        dic['marks'] = link['marks']\n        \n        lst.append(dic)\n    return render_template('studentperformance.html',value=lst)\n",
			"file": "/C/Users/hp/Downloads/main.py",
			"file_size": 25303,
			"file_write_time": 132586570706886563,
			"settings":
			{
				"buffer_size": 25303,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Remove Package"
			],
			[
				"install pa",
				"Install Package Control"
			],
			[
				"Ins",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 62.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/Test Unity Project/Assets/Scripts"
	],
	"file_history":
	[
		"/C/Users/hp/Downloads/Flask_-_product_image_and_hyperlink_included (1)/Flask - product image and hyperlink included/product_search.py",
		"/C/Users/hp/Downloads/Personality Development - English (auto.srt",
		"/C/Users/hp/Downloads/[English (auto-generated)] Personality Development [DownSub.com].srt",
		"/F/#Coding Projects/pyscraping/comicscrap7.py",
		"/C/Users/hp/Downloads/#BG Audio Shloks/assets/Audio59970/playlist_457548_492409_59970/playlist.json",
		"/C/Users/hp/Downloads/Elective_ SEM II _13_02_21.xlsx",
		"/F/#Coding Projects/Selenium python/flipkart_results_FIXED.py",
		"/F/#Coding Projects/Selenium python/amazon_bs_everything.py",
		"/F/#Coding Projects/Selenium python/flipkart_bs.py",
		"/F/#Coding Projects/Selenium python/flipkart_results.py",
		"/F/#Coding Projects/Selenium python/snapdeal_bs.py",
		"/F/#Coding Projects/Selenium python/snapdeal_results.py",
		"/F/#Coding Projects/Selenium python/snadeal_bs.py",
		"/F/#Coding Projects/Selenium python/amazonResults.py",
		"/F/#Coding Projects/Selenium python/Flask_-_product_image_and_hyperlink_included/Flask - product image and hyperlink included/project.py",
		"/F/#Coding Projects/pyscraping/comicscrap_datewise.py",
		"/F/#Coding Projects/pyscraping/comicscrap_datewise_multithread_v3.py",
		"/F/#Coding Projects/pyscraping/quote_v2.py",
		"/F/#Coding Projects/Selenium python/get_product_image.py",
		"/F/#Coding Projects/Selenium python/snapdeal_name_price.py",
		"/F/#Coding Projects/Selenium python/flipkart_name_price.py",
		"/F/#Coding Projects/Selenium python/musicsel9.py",
		"/C/Users/hp/Downloads/get_product_image.py",
		"/F/#Coding Projects/Selenium python/headless_direct_multi.py",
		"/F/#Coding Projects/Selenium python/amazon_name_price.py",
		"/F/#Coding Projects/Selenium python/amazon_price.py",
		"/F/#Coding Projects/pyscraping/comicscrap_datewise_multithread_v2.py",
		"/F/#Coding Projects/Selenium python/snapdeal_price.py",
		"/F/#Coding Projects/Selenium python/improving_headless.py",
		"/F/#Coding Projects/Selenium python/headless_multi.py",
		"/F/#Coding Projects/Selenium python/combined_headless.py",
		"/F/#Coding Projects/pyscraping/headless_multi.py",
		"/F/#Coding Projects/Selenium python/combined.py",
		"/F/#Coding Projects/pyscraping/quote_download_ready.py",
		"/F/#Coding Projects/pyscraping/quoteBase.py",
		"/F/#Coding Projects/Selenium python/flip_amazon.py",
		"/F/#Coding Projects/Selenium python/ecom.py",
		"/F/#Coding Projects/pyscraping/comicscrap6.9.py",
		"/F/#Coding Projects/Selenium python/comicsel7.1.py",
		"/F/#Coding Projects/Selenium python/comicsel5.py",
		"/F/#Coding Projects/pyscraping/comicscrap_datewise_multithread.py",
		"/F/#Coding Projects/Selenium python/comicsel7.py",
		"/F/#Coding Projects/Selenium python/comicsel3.py",
		"/F/#Coding Projects/Selenium python/playdate.py",
		"/C/Users/hp/Downloads/flipkart-basic.py",
		"/F/#Coding Projects/Selenium python/script.py",
		"/F/#Coding Projects/Selenium python/amazonScript.py",
		"/C/Users/hp/Downloads/script.py",
		"/C/Users/hp/Desktop/test.html",
		"/F/#New backup location Reach Atlanta/#reach atlanta project scripts F drive/myRagdoll.cs",
		"/C/Users/hp/Desktop/test_hi.html",
		"/C/Users/hp/Downloads/mini project/mini project/templates/result.html",
		"/C/Users/hp/Downloads/#Olmpycs_v1.0/templates/Country.html",
		"/C/Users/hp/Downloads/app/app/templates/heart_form_detailed.html",
		"/C/Users/hp/Downloads/mini project/mini project/templates/heart_form_detailed.html",
		"/C/Users/hp/Desktop/templates/test_hi.html",
		"/C/Users/hp/Desktop/templates/test_not.html",
		"/C/Users/hp/Desktop/miniproject - flask/templates/heart_form_detailed.html",
		"/C/Users/hp/Desktop/templates/heart_form_detailed.html",
		"/C/Users/hp/Desktop/templates/heart_form_simple.html",
		"/C/Users/hp/Desktop/templates/form.html",
		"/C/Users/hp/Desktop/templates/result.html",
		"/C/Users/hp/Desktop/cleveland.csv",
		"/C/Users/hp/Desktop/templates/test2.html",
		"/C/Users/hp/Desktop/templates/home_heart.html",
		"/F/#Coding Projects/Selenium python/musicsel.py",
		"/F/#Coding Projects/Selenium python/musicsel10.py",
		"/F/#Coding Projects/Selenium python/comicsel.py",
		"/C/Users/hp/Downloads/#Olmpycs_v1.0/templates/country_menu.html",
		"/C/Users/hp/Desktop/templates/heart_form.html",
		"/C/Users/hp/.jupyter/jupyter_notebook_config.py",
		"/C/Users/hp/AppData/Local/Temp/Rar$DIa5112.25595/meta_Magazine_Subscriptions.json",
		"/D/Test Unity Project/Assets/mouseClick.cs",
		"/D/Test Unity Project/Test Unity Project.sublime-project"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"div",
			"mainException",
			"c.NotebookApp.browser",
			"browser"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 11,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 123,
						"regions":
						{
						},
						"selection":
						[
							[
								1,
								1
							]
						],
						"settings":
						{
							"auto_name": "h",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/F/#Coding Projects/Selenium python/direct_link_nothread.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3226,
						"regions":
						{
						},
						"selection":
						[
							[
								2541,
								2608
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/F/#Coding Projects/Selenium python/flipkart_all_selenium.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5090,
						"regions":
						{
						},
						"selection":
						[
							[
								1262,
								1262
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 526.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/F/#Coding Projects/Selenium python/automate.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 295,
						"regions":
						{
						},
						"selection":
						[
							[
								295,
								295
							]
						],
						"settings":
						{
							"auto_name": "import schedule",
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/F/#Coding Projects/Selenium python/flipkart_bs.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3919,
						"regions":
						{
						},
						"selection":
						[
							[
								1086,
								1093
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/F/#Coding Projects/Selenium python/amazonResults.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2436,
						"regions":
						{
						},
						"selection":
						[
							[
								1693,
								1747
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 489.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/F/#Coding Projects/Selenium python/shopclues_with_bs4.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1702,
						"regions":
						{
						},
						"selection":
						[
							[
								1129,
								1129
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 662.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/F/#Coding Projects/pyscraping/comicscrap_datewise_multithread_v3.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5062,
						"regions":
						{
						},
						"selection":
						[
							[
								3494,
								3500
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2166.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/F/#Coding Projects/chatbot/thicc.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 948,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 399.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/F/#Coding Projects/Selenium python/musicsel9.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4416,
						"regions":
						{
						},
						"selection":
						[
							[
								4209,
								3219
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 684.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/F/#Coding Projects/Selenium python/getsubs.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 114,
						"regions":
						{
						},
						"selection":
						[
							[
								114,
								114
							]
						],
						"settings":
						{
							"auto_name": "YouTubeTranscriptApi.get_transcript('QQT6MmRdKPU')",
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/C/Users/hp/Downloads/#OlymPycs_v1.0/#OlymPycs_v1.0/OlymPycs.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38036,
						"regions":
						{
						},
						"selection":
						[
							[
								3994,
								4010
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/F/#Coding Projects/Selenium python/Flask_-_product_image_and_hyperlink_included/Flask - product image and hyperlink included/product_search.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7848,
						"regions":
						{
						},
						"selection":
						[
							[
								747,
								747
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1292.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/F/#Coding Projects/Selenium python/comicBS.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1330,
						"regions":
						{
						},
						"selection":
						[
							[
								709,
								725
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 114.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/F/#Coding Projects/Selenium python/amazonTimeSel.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2521,
						"regions":
						{
						},
						"selection":
						[
							[
								1165,
								1178
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 570.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/F/#Coding Projects/Selenium python/snapdeal_results.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2387,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 627.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "/F/#Coding Projects/pyscraping/cscrap.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5374,
						"regions":
						{
						},
						"selection":
						[
							[
								3709,
								3714
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1368.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "/F/#Coding Projects/Selenium python/shopping_multiprocess.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4865,
						"regions":
						{
						},
						"selection":
						[
							[
								2373,
								1642
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 918.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/F/#Coding Projects/Selenium python/amazon_bs_everything.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3685,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 570.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "/F/#Coding Projects/Selenium python/Flask/Flask/product_search.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6620,
						"regions":
						{
						},
						"selection":
						[
							[
								2115,
								2115
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 513.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "/F/#Coding Projects/Selenium python/Flask/Flask/project.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2475,
						"regions":
						{
						},
						"selection":
						[
							[
								289,
								289
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "/F/#Coding Projects/Selenium python/remove_currency.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 106,
						"regions":
						{
						},
						"selection":
						[
							[
								106,
								106
							]
						],
						"settings":
						{
							"auto_name": "import re",
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "/C/Users/hp/Downloads/main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25303,
						"regions":
						{
						},
						"selection":
						[
							[
								14249,
								14249
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 3058.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 126.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.variable_get":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Test Unity Project.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
